{"version":3,"sources":["services/22servercom.js","22phonebook.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Notification","props","notifStyle","fontSize","margin","padding","borderRadius","borderStyle","borderColor","message","arr","err","style","Searchbox","search","setSearch","setShowAll","value","onChange","event","target","toLowerCase","PersonForm","useState","newName","setNewName","newPhone","setNewPhone","persons","setPersons","setNotification","vanish","setTimeout","onSubmit","preventDefault","filter","person","name","length","window","confirm","changedEntry","number","contactService","updatedNotes","map","x","catch","error","console","log","newEntry","createdPerson","concat","type","Namelist","handleDelete","identifier","confirmation","personsToShow","object","onClick","App","showAll","notification","useEffect","updatedAll","includes","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cab7f2c4.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = 'http://localhost:3001/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst del = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update,\r\n  del: del \r\n}","import React, { useState, useEffect } from 'react'\r\nimport contactService from './services/22servercom'\r\n\r\n\r\nconst Notification = (props) => {\r\n  //notfication takes two props, namely the message that will be displayed\r\n  //and a boolean which determines whether its an error message or not\r\n  const notifStyle = {\r\n    fontSize: 20,\r\n    margin: 20,\r\n    padding: 10,\r\n    borderRadius: 10,\r\n    borderStyle: 'solid',\r\n    borderColor: 'green',\r\n  }\r\n  \r\n  const message = props.arr[0]\r\n  const err = props.arr[1]\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  //change output style if error\r\n  if (err) {\r\n    notifStyle.borderColor = 'red'\r\n  }\r\n\r\n  return (\r\n    <div style={notifStyle}>\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst Searchbox = (props) => {\r\n  const search = props.search\r\n  const setSearch = props.setSearch\r\n  const setShowAll = props.setShowAll\r\n  \r\n  const handleSearch = (event) => {\r\n    setSearch(event.target.value.toLowerCase())\r\n    \r\n    //if input exists, filter\r\n    if (event.target.value) {\r\n      setShowAll(false)\r\n    } //otherwise show all names\r\n    else {\r\n      setShowAll(true)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>filter phone book by name: \r\n      <input\r\n      value={search}\r\n      onChange={handleSearch}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PersonForm = (props) => {\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newPhone, setNewPhone ] = useState('')\r\n  const persons = props.persons\r\n  const setPersons = props.setPersons\r\n  const setNotification = props.setNotification\r\n  \r\n  const handleName = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handlePhone = (event) => {\r\n    setNewPhone(event.target.value)\r\n  }\r\n\r\n  const vanish = () => {\r\n    setTimeout(() => {\r\n      setNotification([null, false])\r\n    } ,10000)\r\n  }\r\n\r\n  const addName = (event) => {\r\n    event.preventDefault()\r\n    \r\n    //check whether name already exists in persons\r\n    const arr = persons.filter(person => person.name === newName)\r\n\r\n    //if it doesn't exist, add name\r\n    if(!arr.length) {\r\n      const newEntry = {\r\n        name: newName,\r\n        number : newPhone,\r\n        id: persons[persons.length-1].id + 1,\r\n      }\r\n      //add name to db\r\n      contactService\r\n      .create(newEntry)\r\n      .then(createdPerson => {\r\n        //add name to state array\r\n        //createdPerson.data = newEntry\r\n        setPersons(persons.concat(newEntry))\r\n        setNotification([`'${newName}' created.`, false])\r\n        vanish()\r\n      })\r\n      .catch(error => {\r\n        // this is the way to access the error message\r\n        setNotification([`'${error.response.data.error}'`, true])\r\n        vanish()\r\n      })\r\n      \r\n      \r\n    } //otherwise, alert message and update db\r\n    else {\r\n      if(window.confirm(`Replace ${newName}'s phone number with a new one?`)) {\r\n        const changedEntry = {...arr[0], number:newPhone}\r\n        contactService\r\n        .update(arr[0].id, changedEntry)\r\n        .then(updatedNotes => {\r\n          setPersons(persons.map(x => x.id !== arr[0].id? x : updatedNotes))\r\n          setNotification([`'${newName}' updated.`, false])\r\n          vanish()\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n          setNotification([`failed to update '${newName}'.`, true])\r\n          vanish()\r\n        })\r\n        \r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={addName}>\r\n      <div>\r\n        name: <input \r\n        value={newName}\r\n        onChange={handleName}/>\r\n      </div>\r\n      <div>\r\n        number: <input \r\n        value={newPhone}\r\n        onChange={handlePhone}\r\n        />\r\n        </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst Namelist = (props) => {\r\n  const setNotification = props.setNotification\r\n  const setPersons = props.setPersons\r\n  const persons = props.persons\r\n\r\n  const confirmation = (name) => (\r\n    window.confirm(`Are you sure you wanna delete ${name}?`)\r\n  )\r\n  \r\n  const vanish = () => {\r\n    setTimeout(() => {\r\n      setNotification([null, false])\r\n    } ,5000)\r\n  }\r\n\r\n  const handleDelete = (identifier, name) => {\r\n    if (confirmation(name)) {\r\n      //delete entry\r\n      contactService\r\n      .del(identifier)\r\n      .then(() => {\r\n        //delete entry from state array\r\n        setPersons(persons.filter(x => x.id !== identifier))\r\n        setNotification([`'${name}' deleted.`, false])\r\n        vanish()\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        setNotification([`failed to delete '${name}'.`, true])\r\n        vanish()\r\n      })\r\n    }\r\n  }\r\n  \r\n  return (\r\n    props.personsToShow.map(object => <div key={object.id}>\r\n      {object.name} {object.number}\r\n      <button onClick={() => handleDelete(object.id, object.name)}>delete</button>\r\n    </div>)\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([])\r\n  const [ showAll, setShowAll ] = useState(true)\r\n  const [ search, setSearch ] = useState('')\r\n  const [ notification, setNotification ] = useState([null, false])\r\n\r\n  //fetch data from server db.json\r\n  const hook = () => {\r\n    contactService\r\n      .getAll()\r\n      .then(updatedAll => {\r\n        setPersons(updatedAll)\r\n      })\r\n  }\r\n  useEffect(hook, [])\r\n\r\n  //personstoshow is the whole array if showall is true, and filtered otherwise\r\n  const personsToShow = showAll? persons\r\n  : persons.filter(person => person.name.toLowerCase().includes(search))\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Notification arr={notification} />\r\n      <h2>Search</h2>\r\n      <Searchbox setShowAll={setShowAll} search={search} setSearch={setSearch}/>\r\n      <h2>Add a new contact</h2>\r\n      <PersonForm persons={persons} setPersons={setPersons} setNotification={setNotification}/>\r\n      <h2>Numbers</h2>\r\n      <Namelist personsToShow={personsToShow} persons={persons} setPersons={setPersons} setNotification={setNotification}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './22phonebook';\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}